// <auto-generated />
using System;
using FutFut.Profile.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FutFut.Profile.Service.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250605091058_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FutFut.Profile.Service.Entities.DescriptionPhotos", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileEntityId");

                    b.ToTable("DescriptionPhotos");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.PlayedHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("PlayedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PlayedHistory");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.DescriptionPhotos", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany("DescriptionPhotos")
                        .HasForeignKey("ProfileEntityId");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.ProfileEntity", b =>
                {
                    b.Navigation("DescriptionPhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
