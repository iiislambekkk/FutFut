// <auto-generated />
using System;
using FutFut.Profile.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FutFut.Profile.Service.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250612110049_maybeFinal")]
    partial class maybeFinal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FutFut.Profile.Service.Entities.AboutPhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfileEntityId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileEntityId");

                    b.HasIndex("ProfileEntityId1");

                    b.ToTable("AboutPhotos");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.FriendShipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfileEntityId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RespondedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileEntityId");

                    b.HasIndex("ProfileEntityId1");

                    b.HasIndex("RequestedUserId", "RespondedUserId")
                        .IsUnique();

                    b.ToTable("FriendShipEntities");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.PlayedHistoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("PlayedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfileEntityId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileEntityId");

                    b.HasIndex("ProfileEntityId1");

                    b.ToTable("PlayedHistory");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowFriends")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPlayingSong")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowRecentlyPlayed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.SystemWorks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("TimeOfWork")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SystemWorks");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.AboutPhotoEntity", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany("AboutPhotos")
                        .HasForeignKey("ProfileEntityId");

                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany()
                        .HasForeignKey("ProfileEntityId1");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.FriendShipEntity", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany("FriendShips")
                        .HasForeignKey("ProfileEntityId");

                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany()
                        .HasForeignKey("ProfileEntityId1");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.PlayedHistoryEntity", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany("PlayedHistory")
                        .HasForeignKey("ProfileEntityId");

                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany()
                        .HasForeignKey("ProfileEntityId1");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.ProfileEntity", b =>
                {
                    b.Navigation("AboutPhotos");

                    b.Navigation("FriendShips");

                    b.Navigation("PlayedHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
