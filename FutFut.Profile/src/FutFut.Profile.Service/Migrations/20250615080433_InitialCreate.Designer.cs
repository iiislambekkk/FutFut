// <auto-generated />
using System;
using FutFut.Profile.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FutFut.Profile.Service.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250615080433_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FutFut.Profile.Service.Entities.AboutPhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileEntityId");

                    b.HasIndex("ProfileId");

                    b.ToTable("AboutPhotos");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.FriendShipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FriendAId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendBId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FriendAId");

                    b.HasIndex("FriendBId");

                    b.ToTable("FriendShips");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.FriendShipRequestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("FriendShipRequests");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.PlayedHistoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("PlayedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProfileEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileEntityId");

                    b.HasIndex("ProfileId");

                    b.ToTable("PlayedHistory");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowFriends")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowPlayingSong")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowRecentlyPlayed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.SystemWorks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("TimeOfWork")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SystemWorks");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.AboutPhotoEntity", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany("AboutPhotos")
                        .HasForeignKey("ProfileEntityId");

                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.FriendShipEntity", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", "FriendA")
                        .WithMany()
                        .HasForeignKey("FriendAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", "FriendB")
                        .WithMany()
                        .HasForeignKey("FriendBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FriendA");

                    b.Navigation("FriendB");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.FriendShipRequestEntity", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", "FromProfile")
                        .WithMany("SentFriendShipRequests")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", "ToProfile")
                        .WithMany("ReceivedFriendShipRequests")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromProfile");

                    b.Navigation("ToProfile");
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.PlayedHistoryEntity", b =>
                {
                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany("PlayedHistory")
                        .HasForeignKey("ProfileEntityId");

                    b.HasOne("FutFut.Profile.Service.Entities.ProfileEntity", null)
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FutFut.Profile.Service.Entities.ProfileEntity", b =>
                {
                    b.Navigation("AboutPhotos");

                    b.Navigation("PlayedHistory");

                    b.Navigation("ReceivedFriendShipRequests");

                    b.Navigation("SentFriendShipRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
